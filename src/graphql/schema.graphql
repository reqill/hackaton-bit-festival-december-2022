### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Group {
  admin: User
  id: String!
  name: String
  tasks: [Task]
  users: [User]
}

enum Importance {
  CRITICAL
  HIGH
  LOW
  MEDIUM
}

type Mutation {
  addEvent(endDate: String!, importance: importanceInput!, name: String!, startDate: String!): Task!
  addGroupEvent(endDate: String!, groupId: String!, importance: importanceInput!, name: String!, startDate: String!): Task!
  addGroupTask(groupId: String!, importance: importanceInput!, name: String!, suspectedDuration: Int): Task!
  addTask(importance: importanceInput!, name: String!, suspectedDuration: Int): Task!
  addToGroup(email: String!, groupId: String!): Group!
  createGroup(name: String!): Group!
  findFit(calculationInterval: Int, endDate: String!, maxEndTime: Int, minStartTime: Int, startDate: String!, taskId: String!): Task!
  findGroupFit(calculationInterval: Int, endDate: String!, groupId: String!, maxEndTime: Int, minStartTime: Int, startDate: String!, taskId: String!): Task!
}

type Query {
  me: User
}

type Task {
  endDate: String
  group: Group
  id: String!
  importance: Importance
  name: String
  planned: Boolean
  startDate: String
  suspectedDuration: Int
  users: [User]
}

type User {
  adminOf: [Group]
  email: String
  groups: [Group]
  id: String!
  name: String
  tasks: [Task]
}

input importanceInput {
  importance: Importance!
}
